<?php

class DnaFindPairTestCase extends DrupalUnitTestCase
{
    public static function getInfo()
    {
        return array(
        'name' => 'DNA Tests',
        'description' => 'Tests that the DNA strand Assembler is functioning properly.',
        'group' => 'Code Review Tests',
        );
    }

    function testDnaFindPair()
    {
        $description = 'A DNA molecule of A returns the molecule T';
        $input = 'A';
        $result = dna_find_pair($input);
        $expected_output = 'T';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A DNA molecule of T returns the molecule A';
        $input = 'T';
        $result = dna_find_pair($input);
        $expected_output = 'A';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A DNA molecule of C returns the molecule G';
        $input = 'C';
        $result = dna_find_pair($input);
        $expected_output = 'G';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'A DNA molecule of G returns the molecule C.';
        $input = 'G';
        $result = dna_find_pair($input);
        $expected_output = 'C';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'The input of a space is returned as null character.';
        $input = ' ';
        $result = dna_find_pair($input);
        $expected_output = '';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An input of ATCG returns TAGC.';
        $input = 'ATCG';
        $result = dna_find_strand($input);
        $expected_output = 'TAGC';
        $this->assertEqual($result, $expected_output, $description);

        $description = 'An input of A T C G returns TAGC.';
        $input = 'A T C G';
        $result = dna_find_strand($input);
        $expected_output = 'TAGC';
        $this->assertEqual($result, $expected_output, $description);
    }
}

class DnaModuleTests extends DrupalWebTestCase {

    public static function getInfo() {
        return array(
            'name' => 'DNA Tests',
            'description' => 'tests for the DNA assembly Module.',
            'group' => 'Code Review Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('dna'));
    }

    public function testDnaValid() {
        $this->drupalGet('dna');

        $this->assertText("DNA Strand Assembler", 'Form displayed!');

        $form = array();
        $form['input_strand'] = 'TAGC';
        $this->drupalPost('dna', $form, t('assemble'));

        $this->assertText("'1st strand: TAGC / '2nd strand: ATCG", 'Output displayed!');
    }

    public function testDnaValid() {
        $this->drupalGet('dna');

        $this->assertText("DNA Strand Assembler", 'Form displayed!');

        $form = array();
        $form['input_strand'] = 'TAGC';
        $this->drupalPost('dna', $form, t('assemble'));

        $this->assertText("Assembled DNA strand!", 'Output displayed!');
    }

    public function testDnaInvalidCharacters() {
        $this->drupalGet('dna');

        $this->assertText("DNA Strand Assembler", 'Form displayed!');

        $form = array();
        $form['input_strand'] = 'ATCbf GcG!';
        $this->drupalPost('dna', $form, t('assemble'));

        $this->assertText('Only the case sensitive letters A, T, C, and G are accepted.');
    }

}
